[{"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/2-chat-simple/chat-ui/src/App.js":"1","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/App.js":"2","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/ChatHistory.js":"3","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/ContactList.js":"4","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/reportWebVitals.js":"5","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/index.js":"6","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/helpers/axios.js":"7","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/Login.jsx":"8"},{"size":2276,"mtime":1616770328921,"results":"9","hashOfConfig":"10"},{"size":3183,"mtime":1621925358181,"results":"11","hashOfConfig":"12"},{"size":2417,"mtime":1621943528809,"results":"13","hashOfConfig":"12"},{"size":530,"mtime":1621837179342,"results":"14","hashOfConfig":"12"},{"size":362,"mtime":1620229484949,"results":"15","hashOfConfig":"12"},{"size":455,"mtime":1620229484949,"results":"16","hashOfConfig":"12"},{"size":217,"mtime":1621672332960,"results":"17","hashOfConfig":"12"},{"size":1033,"mtime":1621925185060,"results":"18","hashOfConfig":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"pcuffp",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"16w0ahx",{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/2-chat-simple/chat-ui/src/App.js",["38"],"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/App.js",["39","40"],"import './App.scss';\nimport { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client'\nimport axios, { MESSAGE_SERVER_URL } from './helpers/axios'\nimport ChatHistory from './ChatHistory';\nimport ContactList from './ContactList';\nimport Login from './Login'\n\nfunction App() {\n\n  const [socket, setSocket] = useState()\n  const [user, setUser] = useState() // this is us :)\n  const [contacts, setContacts] = useState([]) // this stores all our chat contacts\n  const [contact, setContact] = useState() // this stores the chat contact we currently (!) have a chat with\n  const [chatHistory, setChatHistory] = useState([]) // this stores the message history of the user we currently chat with\n\n  // FETCH CHAT CONTACTS on load\n  useEffect(() => {\n\n    axios.get(\"/users\")\n    .then( res => {\n      console.log(res.data)\n      setContacts(res.data)\n    })\n    .catch(err => { \n      console.log(\"[ERROR] User fetching...\")\n      console.log(err.response ? err.response.data : \"API not reachable\")\n    })\n\n  }, [] )\n\n\n  // ONCE CONTACT SELECTED / SWITCHED => initiate chat\n  useEffect(() => {\n\n    if(!contact) return\n\n    // set user ID on connection!\n    // other parties can then send messages directly to our userId!\n    // by the way: exactly this call of the io(..) function will trigger the io.on(\"connection\") event in the server.js file !\n    const socket = io(MESSAGE_SERVER_URL, { query: `userId=${user._id}` }) // connect to API\n    setSocket(socket)\n\n    console.log(\"Fetching history of users: \", user._id, contact._id)\n    \n    // load chat history from server\n    axios.get(`/chat-history/${user._id}/${contact._id}`)\n    .then(res => {\n      console.log(\"History: \", res.data)\n      setChatHistory(res.data)\n    })\n\n    // Disconnect socket when leaving chat...\n    return () => socket && socket.disconnect()\n\n  }, [contact])\n  \n\n  const logout = () => {\n    setContact()\n    setUser()\n    setChatHistory([])\n  }\n\n\n  return (\n    <div className=\"App\">\n\n      {/* NAVBAR with login status */}\n      <nav>\n        { !user && <Login contacts={contacts} setUser={setUser} /> }\n        { user && <>\n          <span>Hello <b>{user.username.toUpperCase()}</b> </span> \n          <svg onClick={ logout } xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n          </svg>\n        </> }\n      </nav>\n\n      {/* CHAT CONTAINER with two panels: chat contacts on the left, chat messages on the right */}\n      <div id=\"chat-container\">\n        { user && contacts.length && \n          <ContactList \n            user={user} \n            contacts={contacts} \n            contact={contact} \n            setContact={setContact} \n          /> }\n        { user && contact && \n          <ChatHistory \n            socket={socket} \n            user={user} \n            contact={contact} \n            chatHistory={chatHistory} \n            setChatHistory={setChatHistory} \n          /> }\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/ChatHistory.js",["41","42","43","44"],"import { useEffect, useRef, useState } from \"react\"\n\nconst ChatHistory = ({ user, contact, socket, chatHistory, setChatHistory }) => {\n\n  const msgRef = useRef() // store fresh message\n\n  // define listeners AFTER connection is setup\n  useEffect(() => {\n\n    if(!socket) return // it makes no sense to listen for messaging, if we have no socket connection :)\n\n    // when receiving new message - \n    socket.on(\"message\", (chatMsg) => {\n      console.log(\"Received message from server: \", chatMsg)\n\n      // ONLY add messages to history if it was sent by current contact...\n      if(chatMsg.senderId._id != contact._id) {\n        console.log(\"Message discarded... non active room user\")\n        return\n      }\n\n      setChatHistory([...chatHistory, chatMsg]) // append new message to chat history\n    })\n\n    return () => socket && socket.off('message') // unregister message event listening...\n\n  }, [socket, chatHistory]) // this effect will FIRE when the socket was set!\n\n\n\n  // send direct message to other contact\n  const sendMessage = (e) => {\n    e.preventDefault()\n\n    if(!msgRef.current.value) return alert(\"Please state a message\")\n\n    // construct message object\n    let chatMsg = { \n      msg: msgRef.current.value, \n      // specify who sent the message\n      senderId: {\n        _id: user._id,\n        username: user.username\n      },\n      receiverId: contact._id \n    }\n\n    msgRef.current.value = \"\" // clear input box\n\n    // send an EVENT to server! (to a hotline channel)\n    socket.emit('message', chatMsg) \n    setChatHistory([ ...chatHistory, chatMsg ]) // add to local history too\n  }\n \n  // create Chat history list\n  let jsxHistory = (chatHistory || []).map((chatMsg, i) => {\n    // whatsapp FLOW STYLING\n    let cssMsg = chatMsg.senderId._id == user._id ? 'chat-msg-me' : 'chat-msg-other'\n    return <div className={`chat-msg ${cssMsg}`} key={i} >\n      <label>{chatMsg.senderId.username}:</label>\n      <span>{chatMsg.msg}</span>\n    </div>\n  })\n\n  return ( \n    <div className=\"chat-history\">\n      <h2>Chat</h2>\n      <div className=\"chat-messages\">\n        {jsxHistory}\n      </div>\n      <form className=\"frm-message\" onSubmit={sendMessage}>\n        <input \n          autoComplete=\"off\"\n          ref={msgRef}\n          placeholder={`Type your message, ${user.username}...`} />\n        <button type=\"submit\" >Send</button>\n      </form>\n    </div>\n  )\n}\n \nexport default ChatHistory;",["45","46"],"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/ContactList.js",["47","48","49"],"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/reportWebVitals.js",[],"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/index.js",[],"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/helpers/axios.js",[],"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/Login.jsx",[],{"ruleId":"50","severity":1,"message":"51","line":11,"column":20,"nodeType":"52","messageId":"53","endLine":11,"endColumn":31},{"ruleId":"50","severity":1,"message":"54","line":2,"column":21,"nodeType":"52","messageId":"53","endLine":2,"endColumn":27},{"ruleId":"55","severity":1,"message":"56","line":56,"column":6,"nodeType":"57","endLine":56,"endColumn":15,"suggestions":"58"},{"ruleId":"50","severity":1,"message":"59","line":1,"column":29,"nodeType":"52","messageId":"53","endLine":1,"endColumn":37},{"ruleId":"60","severity":1,"message":"61","line":17,"column":31,"nodeType":"62","messageId":"63","endLine":17,"endColumn":33},{"ruleId":"55","severity":1,"message":"64","line":27,"column":6,"nodeType":"57","endLine":27,"endColumn":27,"suggestions":"65"},{"ruleId":"60","severity":1,"message":"66","line":58,"column":39,"nodeType":"62","messageId":"63","endLine":58,"endColumn":41},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"60","severity":1,"message":"66","line":5,"column":17,"nodeType":"62","messageId":"63","endLine":5,"endColumn":19},{"ruleId":"71","severity":1,"message":"72","line":5,"column":29,"nodeType":"73","messageId":"74","endLine":5,"endColumn":35},{"ruleId":"60","severity":1,"message":"66","line":8,"column":45,"nodeType":"62","messageId":"63","endLine":8,"endColumn":47},"no-unused-vars","'setUserName' is assigned a value but never used.","Identifier","unusedVar","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user._id'. Either include it or remove the dependency array.","ArrayExpression",["75"],"'useState' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'contact._id' and 'setChatHistory'. Either include them or remove the dependency array. If 'setChatHistory' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["76"],"Expected '===' and instead saw '=='.","no-native-reassign",["77"],"no-negated-in-lhs",["78"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue",{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [contact, user._id]",{"range":"83","text":"84"},"Update the dependencies array to be: [socket, chatHistory, contact._id, setChatHistory]",{"range":"85","text":"86"},[1845,1854],"[contact, user._id]",[901,922],"[socket, chatHistory, contact._id, setChatHistory]"]